{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Title\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Content\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Created\"), /*#__PURE__*/_createElementVNode(\"th\")])], -1 /* HOISTED */);\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_note_form = _resolveComponent(\"note-form\");\n  return _openBlock(), _createElementBlock(\"div\", null, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, \"Loading Notes...\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_note_form, {\n    onCompleted: $options.addNote,\n    onUpdated: $options.updateNote,\n    noteId: $data.id,\n    noteTitle: $data.title,\n    noteContent: $data.content,\n    editButtonText: $data.buttonText\n  }, null, 8 /* PROPS */, [\"onCompleted\", \"onUpdated\", \"noteId\", \"noteTitle\", \"noteContent\", \"editButtonText\"]), _createElementVNode(\"table\", null, [_hoisted_3, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notes, note => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: note\n    }, [_createElementVNode(\"td\", null, _toDisplayString(note.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(note.title), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(note.content), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(note.created_at), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: _normalizeClass({\n        'is-loading': $options.isDeleting(note.id)\n      }),\n      onClick: $event => $options.deleteNote(note.id)\n    }, \"Delete\", 10 /* CLASS, PROPS */, _hoisted_4), _createElementVNode(\"button\", {\n      class: _normalizeClass({\n        'is-editing': $options.isEditing(note.id)\n      }),\n      onClick: $event => $options.editNote(note.id)\n    }, \"Edit\", 10 /* CLASS, PROPS */, _hoisted_5)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])]))]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","$data","isLoading","_hoisted_1","_hoisted_2","_createVNode","_component_note_form","onCompleted","$options","addNote","onUpdated","updateNote","noteId","id","noteTitle","title","noteContent","content","editButtonText","buttonText","_hoisted_3","_Fragment","_renderList","notes","note","key","_toDisplayString","created_at","class","_normalizeClass","isDeleting","onClick","$event","deleteNote","_hoisted_4","isEditing","editNote","_hoisted_5"],"sources":["/Users/neilclayton/Documents/Dev/laravel/willsuite/frontend-vue/src/components/NotesTable.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-if=\"isLoading\">Loading Notes...</div>\n    <div v-else>\n        <note-form \n            @completed=\"addNote\" \n            @updated=\"updateNote\" \n            :noteId=\"id\" \n            :noteTitle=\"title\" \n            :noteContent=\"content\"\n            :editButtonText=\"buttonText\">\n        </note-form>\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Title</th>\n                    <th>Content</th>\n                    <th>Created</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                    <tr v-for=\"note in notes\" :key=\"note\">\n                        <td>{{note.id}}</td>\n                        <td>{{note.title}}</td>\n                        <td>{{note.content}}</td>\n                        <td>{{note.created_at}}</td>\n                        <td>\n                            <button v-bind:class=\"{'is-loading' : isDeleting(note.id)}\" @click=\"deleteNote(note.id)\">Delete</button>\n                            <button v-bind:class=\"{'is-editing' : isEditing(note.id) }\" @click=\"editNote(note.id)\">Edit</button>\n                        </td>\n                    </tr>\n            </tbody>\n        </table>\n        \n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { API_BASE_URL } from '@/config';\nimport NoteForm from './NoteForm.vue';\n\nexport default {\n    components: {\n        NoteForm\n    },\n    data() {\n        return {\n            isLoading: true,\n            id: '',\n            title: '',\n            buttonText: 'Add Note',\n            content: '',\n            notes: {}\n        }\n    },\n    async created() {\n        try {\n            const response = await axios.get(API_BASE_URL + '/notes')\n            this.notes = response.data.data\n            this.isLoading = false\n        } catch (e) {\n            //TODO: do something with error \n        }\n    },\n    methods: {\n        addNote(note) {\n            this.notes.push(note)\n        },\n        updateNote(noteUpdate) {\n            let index = this.notes.findIndex(note => note.id === noteUpdate.id)\n            this.notes[index] = noteUpdate\n            console.log('NOTE', noteUpdate)\n        },\n        isDeleting(id) {\n            let index = this.notes.findIndex(note => note.id === id)\n            return this.notes[index].isDeleting\n        },\n        async deleteNote(id) {\n            let index = this.notes.findIndex(note => note.id === id) \n            await axios.delete(API_BASE_URL + '/notes/' + id)\n            this.notes.splice(index, 1)\n        },\n        isEditing(id) {\n            console.log(id)\n        },\n        async editNote(id) {\n            let index = this.notes.findIndex(note => note.id === id);\n            console.log('INDEX', index)\n            try {\n                const response = await axios.get(API_BASE_URL + '/notes/' + id)\n                this.id = response.data.data.id\n                this.title = response.data.data.title\n                this.content = response.data.data.content\n                this.buttonText = \"Edit Note\"\n                \n            } catch (e) {\n                console.log(e)\n            }\n        }\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;;;;;;gCAaYA,mBAAA,CAQQ,gB,aAPJA,mBAAA,CAMK,a,aALDA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAS,M;;;;;uBAlB3BC,mBAAA,CAoCM,cAnCOC,KAAA,CAAAC,SAAS,I,cAApBF,mBAAA,CAA4C,OAAAG,UAAA,EAAtB,kBAAgB,M,cACtCH,mBAAA,CAiCM,OAAAI,UAAA,GAhCFC,YAAA,CAOYC,oBAAA;IANPC,WAAS,EAAEC,QAAA,CAAAC,OAAO;IAClBC,SAAO,EAAEF,QAAA,CAAAG,UAAU;IACnBC,MAAM,EAAEX,KAAA,CAAAY,EAAE;IACVC,SAAS,EAAEb,KAAA,CAAAc,KAAK;IAChBC,WAAW,EAAEf,KAAA,CAAAgB,OAAO;IACpBC,cAAc,EAAEjB,KAAA,CAAAkB;iHAErBpB,mBAAA,CAsBQ,gBArBJqB,UAQQ,EACRrB,mBAAA,CAWQ,iB,kBAVAC,mBAAA,CASKqB,SAAA,QAAAC,WAAA,CATcrB,KAAA,CAAAsB,KAAK,EAAbC,IAAI;yBAAfxB,mBAAA,CASK;MATsByB,GAAG,EAAED;IAAI,IAChCzB,mBAAA,CAAoB,YAAA2B,gBAAA,CAAdF,IAAI,CAACX,EAAE,kBACbd,mBAAA,CAAuB,YAAA2B,gBAAA,CAAjBF,IAAI,CAACT,KAAK,kBAChBhB,mBAAA,CAAyB,YAAA2B,gBAAA,CAAnBF,IAAI,CAACP,OAAO,kBAClBlB,mBAAA,CAA4B,YAAA2B,gBAAA,CAAtBF,IAAI,CAACG,UAAU,kBACrB5B,mBAAA,CAGK,aAFDA,mBAAA,CAAwG;MAAzF6B,KAAK,EAAAC,eAAA;QAAA,cAAkBrB,QAAA,CAAAsB,UAAU,CAACN,IAAI,CAACX,EAAE;MAAA;MAAKkB,OAAK,EAAAC,MAAA,IAAExB,QAAA,CAAAyB,UAAU,CAACT,IAAI,CAACX,EAAE;OAAG,QAAM,yBAAAqB,UAAA,GAC/FnC,mBAAA,CAAoG;MAArF6B,KAAK,EAAAC,eAAA;QAAA,cAAkBrB,QAAA,CAAA2B,SAAS,CAACX,IAAI,CAACX,EAAE;MAAA;MAAMkB,OAAK,EAAAC,MAAA,IAAExB,QAAA,CAAA4B,QAAQ,CAACZ,IAAI,CAACX,EAAE;OAAG,MAAI,yBAAAwB,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}